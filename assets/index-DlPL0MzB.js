(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))h(i);new MutationObserver(i=>{for(const n of i)if(n.type==="childList")for(const p of n.addedNodes)p.tagName==="LINK"&&p.rel==="modulepreload"&&h(p)}).observe(document,{childList:!0,subtree:!0});function e(i){const n={};return i.integrity&&(n.integrity=i.integrity),i.referrerPolicy&&(n.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?n.credentials="include":i.crossOrigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function h(i){if(i.ep)return;i.ep=!0;const n=e(i);fetch(i.href,n)}})();class s extends Error{position;constructor(t,e){super(`${t} at position ${e}`),this.name="JSONParseError",this.position=e}}class u{pos=0;input;length;constructor(t){this.input=t,this.length=t.length}parse(){if(this.pos=0,this.skipWhitespace(),this.pos>=this.length)throw new s("Unexpected end of JSON input",this.pos);const t=this.parseValue();if(this.skipWhitespace(),this.pos<this.length)throw new s(`Unexpected token '${this.input[this.pos]}'`,this.pos);return t}parseValue(){if(this.skipWhitespace(),this.pos>=this.length)throw new s("Unexpected end of JSON input",this.pos);const t=this.input[this.pos];switch(t){case"{":return this.parseObject();case"[":return this.parseArray();case'"':return this.parseString();case"t":return this.parseTrue();case"f":return this.parseFalse();case"n":return this.parseNull();case"-":case"0":case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":case"9":return this.parseNumber();default:throw new s(`Unexpected token '${t}'`,this.pos)}}parseObject(){const t={};if(this.pos++,this.skipWhitespace(),this.pos<this.length&&this.input[this.pos]==="}")return this.pos++,t;let e=!0;for(;this.pos<this.length;){if(!e){if(this.skipWhitespace(),this.pos>=this.length)throw new s("Unexpected end of JSON input",this.pos);if(this.input[this.pos]==="}")return this.pos++,t;if(this.input[this.pos]!==",")throw new s(`Expected ',' or '}' but got '${this.input[this.pos]}'`,this.pos);this.pos++}if(e=!1,this.skipWhitespace(),this.pos>=this.length||this.input[this.pos]!=='"')throw new s("Expected string key",this.pos);const h=this.parseString();if(this.skipWhitespace(),this.pos>=this.length||this.input[this.pos]!==":")throw new s("Expected ':' after key",this.pos);this.pos++;const i=this.parseValue();t[h]=i}throw new s("Unterminated object",this.pos)}parseArray(){const t=[];if(this.pos++,this.skipWhitespace(),this.pos<this.length&&this.input[this.pos]==="]")return this.pos++,t;let e=!0;for(;this.pos<this.length;){if(!e){if(this.skipWhitespace(),this.pos>=this.length)throw new s("Unexpected end of JSON input",this.pos);if(this.input[this.pos]==="]")return this.pos++,t;if(this.input[this.pos]!==",")throw new s(`Expected ',' or ']' but got '${this.input[this.pos]}'`,this.pos);this.pos++}e=!1;const h=this.parseValue();t.push(h)}throw new s("Unterminated array",this.pos)}parseString(){let t="";for(this.pos++;this.pos<this.length;){const e=this.input[this.pos];if(e==='"')return this.pos++,t;if(e==="\\"){if(this.pos++,this.pos>=this.length)throw new s("Unterminated string escape sequence",this.pos);const h=this.input[this.pos];switch(h){case'"':t+='"';break;case"\\":t+="\\";break;case"/":t+="/";break;case"b":t+="\b";break;case"f":t+="\f";break;case"n":t+=`
`;break;case"r":t+="\r";break;case"t":t+="	";break;case"u":if(this.pos+4>=this.length)throw new s("Incomplete unicode escape sequence",this.pos);const i=this.input.slice(this.pos+1,this.pos+5);if(!/^[0-9a-fA-F]{4}$/.test(i))throw new s(`Invalid unicode escape sequence \\u${i}`,this.pos);t+=String.fromCharCode(parseInt(i,16)),this.pos+=4;break;default:throw new s(`Invalid escape sequence \\${h}`,this.pos)}}else{if(e<" "&&e!=="	")throw new s(`Unescaped control character (code ${e.charCodeAt(0)})`,this.pos);t+=e}this.pos++}throw new s("Unterminated string",this.pos)}parseNumber(){const t=this.pos;if(this.input[this.pos]==="-"&&(this.pos++,this.pos>=this.length||!this.isDigit(this.input[this.pos])))throw new s("Invalid number format",this.pos);if(this.input[this.pos]==="0"){if(this.pos++,this.pos<this.length&&this.isDigit(this.input[this.pos]))throw new s("Invalid number: leading zeros not allowed",this.pos)}else if(this.isDigit(this.input[this.pos]))for(;this.pos<this.length&&this.isDigit(this.input[this.pos]);)this.pos++;else throw new s("Invalid number format",this.pos);if(this.pos<this.length&&this.input[this.pos]==="."){if(this.pos++,this.pos>=this.length||!this.isDigit(this.input[this.pos]))throw new s("Invalid number: decimal point must be followed by digits",this.pos);for(;this.pos<this.length&&this.isDigit(this.input[this.pos]);)this.pos++}if(this.pos<this.length&&(this.input[this.pos]==="e"||this.input[this.pos]==="E")){if(this.pos++,this.pos<this.length&&(this.input[this.pos]==="+"||this.input[this.pos]==="-")&&this.pos++,this.pos>=this.length||!this.isDigit(this.input[this.pos]))throw new s("Invalid number: exponent must contain digits",this.pos);for(;this.pos<this.length&&this.isDigit(this.input[this.pos]);)this.pos++}const e=this.input.slice(t,this.pos),h=Number(e);if(!Number.isFinite(h))throw new s(`Invalid number: ${e}`,t);return h}parseTrue(){if(this.input.slice(this.pos,this.pos+4)==="true")return this.pos+=4,!0;throw new s("Expected 'true'",this.pos)}parseFalse(){if(this.input.slice(this.pos,this.pos+5)==="false")return this.pos+=5,!1;throw new s("Expected 'false'",this.pos)}parseNull(){if(this.input.slice(this.pos,this.pos+4)==="null")return this.pos+=4,null;throw new s("Expected 'null'",this.pos)}skipWhitespace(){for(;this.pos<this.length&&this.isWhitespace(this.input[this.pos]);)this.pos++}isWhitespace(t){return t===" "||t==="	"||t===`
`||t==="\r"}isDigit(t){return t>="0"&&t<="9"}}const c=document.querySelector("#app");c.innerHTML=`
  <h1>TypeScript JSON Parser</h1>
  <textarea id="json-input" rows="10" cols="50" placeholder="Paste JSON here..."></textarea>
  <br>
  <button id="parse-btn">Parse</button>
  <button id="clear-btn">Clear</button>
  <pre id="output"></pre>
`;const a=document.querySelector("#json-input"),r=document.querySelector("#output"),l=document.querySelector("#parse-btn"),f=document.querySelector("#clear-btn");l.addEventListener("click",()=>{const o=a.value.trim();if(!o){r.textContent="Please enter JSON input.";return}try{const e=new u(o).parse();r.textContent=JSON.stringify(e,null,2)}catch(t){r.textContent=`❌ Error: ${t.message}`}});f.addEventListener("click",()=>{a.value="",r.textContent=""});
